buildscript {
    repositories {
        maven { url = "https://maven.minecraftforge.net" }
        maven { url = "https://repo.spongepowered.org/maven" }
        mavenCentral()
    }
    dependencies {
        classpath group: "net.minecraftforge.gradle", name: "ForgeGradle", version: "5.1.+", changing: true
        classpath "org.spongepowered:mixingradle:0.7-SNAPSHOT"
    }
}

repositories {
  maven {
    name = "Progwml6 maven"
    url = "https://dvs1.progwml6.com/files/maven/"
  }
  maven {
    name = "ModMaven"
    url = "https://modmaven.dev/"
  }
}

repositories {
    maven {
        url = "https://www.cursemaven.com"
    }
}

apply plugin: "net.minecraftforge.gradle"
apply plugin: "eclipse"
apply plugin: "org.spongepowered.mixin"

version = "${mc_version}-${mod_version}"
group = "net.rennautogirl63.beyond_orbita"
archivesBaseName = "Beyond-Orbita"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: "official", version: "${mc_version}"
    accessTransformer = file("src/main/resources/META-INF/accesstransformer.cfg")

    runs {
        client {
            workingDirectory project.file("run")

            property "forge.logging.markers", "REGISTRIES"
            property "forge.logging.console.level", "debug"
            arg "-mixin.config=beyond_orbita.mixin.json"

            mods {
                beyond_orbita {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file("run")

            property "forge.logging.markers", "REGISTRIES"
            property "forge.logging.console.level", "debug"
            arg "-mixin.config=beyond_orbita.mixin.json"

            mods {
                beyond_orbita {
                    source sourceSets.main
                }
            }
        }
        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'beyond_orbita', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            environment 'target', 'fmluserdevdata'

            mods {
                beyond_orbita {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    maven {
        name = 'tterrag maven'
        url = 'https://maven.tterrag.com/'
    }
    maven {
        url "https://cubicinterpolation.net/maven/"
    }
	maven {
		url "https://cursemaven.com"
		content {
			includeGroup "curse.maven"
		}
	flatDir {
	   dirs 'libs'
	   }
	}
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    //Mixin
    if (System.getProperty("idea.sync.active") != "true") {
        annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"
    }

    // JEI
    compileOnly fg.deobf("mezz.jei:jei-${mc_version}-common-api:${jei_version}")
    compileOnly fg.deobf("mezz.jei:jei-${mc_version}-forge-api:${jei_version}")
    runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}")

    // The One Probe
    compileOnly fg.deobf("curse.maven:the-one-probe-245211:${the_one_probe_version}")
    
    // Jade
    implementation fg.deobf("curse.maven:jade-324717:${jade_version}")

    // TConstruct
    compileOnly fg.deobf("slimeknights.mantle:Mantle:${mc_version}-${mantle_version}")
    compileOnly fg.deobf("slimeknights.tconstruct:TConstruct:${mc_version}-${tconstruct_version}")

    // Mekanism
    compileOnly fg.deobf("mekanism:Mekanism:${mc_version}-${mekanism_version}")
    // runtimeOnly fg.deobf("mekanism:Mekanism:${mc_version}-${mekanism_version}")
    compileOnly fg.deobf("mekanism:Mekanism:${mc_version}-${mekanism_version}:additions")
    compileOnly fg.deobf("mekanism:Mekanism:${mc_version}-${mekanism_version}:generators")
    compileOnly fg.deobf("mekanism:Mekanism:${mc_version}-${mekanism_version}:tools")
	
	// Create
    implementation fg.deobf("com.simibubi.create:create-${mc_version}:${create_version}:all") { transitive = false }
    implementation fg.deobf("com.jozufozu.flywheel:flywheel-forge-${mc_version}:${flywheel_version}")
    compileOnly fg.deobf("com.tterrag.registrate:Registrate:${registrate_version}")

    // Create Crafts and Additions
    implementation fg.deobf("curse.maven:createaddition-439890:${createaddition_version}")

    // Create Alloyed
    implementation fg.deobf("curse.maven:create-alloyed-564792:${createalloyed_version}")
	
	// Simple Planes
	implementation fg.deobf("curse.maven:simple-planes-388908:${simpleplanes_version}")
	
	// Cold Sweat
	implementation fg.deobf("curse.maven:cold-sweat-506194:${coldsweat_version}")
	
	// World Stripper
	implementation fg.deobf("curse.maven:world-stripper-250603:${worldstripper_version}")

    //Infiniverse
    implementation fg.deobf("commoble.infiniverse:infiniverse-${mc_version}:${infiniverse_version}")

    // The Lost Cities
    implementation fg.deobf("curse.maven:the-lost-cities-269024:${lostcities_version}")

    // TerraForged
    implementation fg.deobf("curse.maven:terraforged-363820:${terraforged_version}")

    // Multiblocked
    implementation fg.deobf("curse.maven:multiblocked-604054:${multiblocked_version}")

    // LDLib
    implementation fg.deobf("curse.maven:ldlib-626676:${ldlib_version}")

}

mixin {
    add sourceSets.main, "beyond_orbita.mixin-refmap.json"
}

jar.finalizedBy("reobfJar")

def resourceTargets = ['META-INF/mods.toml', 'pack.mcmeta']
def intoTargets = ["$rootDir/out/production/resources/", "$rootDir/out/production/${project.name}.main/", "$rootDir/bin/main/"]
def replaceProperties = [mod_version: mod_version, mc_version: mc_version, forge_version: forge_version, loader_version: loader_version]
processResources {
    inputs.properties replaceProperties
    replaceProperties.put 'project', project

    filesMatching(resourceTargets) {
        expand replaceProperties
    }

    intoTargets.each { target ->
        if (file(target).exists()) {
            copy {
                from(sourceSets.main.resources) {
                    include resourceTargets
                    expand replaceProperties
                }
                into target
            }
        }
    }
}


jar {
    manifest {
        attributes([
                "Specification-Title": "beyond_orbita",
                "Specification-Vendor": "rennautogirl63",
                "Specification-Version": "1",
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"rennautogirl63",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs" : "beyond_orbita.mixin.json"
        ])
    }
}